== render partial: 'problem_graph'

div.jumbotron.p-4.mb-3
  h1.mb-0 == problem.id ? '문제 수정' : '문제 추가'

div#problem-edit v-cloak=true
  = simple_form_for problem, html: { 'ref': 'problemForm' } do |f|
    div.row
      div.col style="width: calc(540px + 2rem); min-width: calc(540px + 2rem); max-width: calc(540px + 2rem)"
        a.btn.btn-light href="#{request.referer}" == "#{icon 'caret-left', class: 'mr-2'}목록으로"
      div.col
        = f.button :button, '저장', class: 'btn-block', ':class': '[ readySubmit ? "btn-success" : readySave ? "text-light btn-warning" : "btn-secondary" ]', '@click.prevent': 'saveProblem', data: { disable_with: "<i class='fa fa-spinner fa-spin'/>" }
    hr
    div.row.mb-5
      div.col style="width: calc(540px + 2rem); min-width: calc(540px + 2rem); max-width: calc(540px + 2rem)" ref="problemPreview"
        table.table.table-bordered
          thead.thead-default
            tr
              th.d-flex.justify-content-between.align-items-center
                span == "#{icon 'caret-down', class: 'p-1'} 미리보기"
                div
                  label.m-1.mr-2 해설
                  div.btn-group.btn-group-sm
                    div.btn :class="[ show_explanation ? 'btn-secondary' : 'btn-outline-secondary' ]" @click="show_explanation = true" ON
                    div.btn :class="[ !show_explanation ? 'btn-secondary' : 'btn-outline-secondary' ]" @click="show_explanation = false" OFF
          tbody
            tr
              td.p-0
                div.problem-container.problem-preview
                  div.problem-info.d-flex.justify-content-between.align-items-center.mb-1
                    div.d-inline-flex
                      span.problem-order.text-nowrap v-text="problem.order == undefined ? (problem.id ? 'ID ' + problem.id  : 'NEW') : problem.order + '번'"
                    div.d-inline-flex
                      span.problem-score.text-nowrap @click="inputScore()" v-text="problem.score + '점'"
                      span.problem-level.bg-light.text-warning.d-inline-flex.align-items-center
                        i.fa :class="[ problem.level >= 1 ? 'fa-star' : 'fa-star-o' ]" @mousedown.prevent="inputLevel($event, 1)" @mousemove="inputLevel($event, 1)"
                        i.fa :class="[ problem.level >= 2 ? 'fa-star' : 'fa-star-o' ]" @mousedown.prevent="inputLevel($event, 2)" @mousemove="inputLevel($event, 2)"
                        i.fa :class="[ problem.level == 3 ? 'fa-star' : 'fa-star-o' ]" @mousedown.prevent="inputLevel($event, 3)" @mousemove="inputLevel($event, 3)"
                  div.problem-wrapper
                    div.problem-content v-html="problem.content" @click="openEditorModal('content')" :class="{ 'is-editing': focusInput == 'content' }"
                    div.problem-exm v-if="problem.is_objective"
                      div.problem-exm-wrapper v-for="(exm, index) in [problem.exm_1, problem.exm_2, problem.exm_3, problem.exm_4, problem.exm_5]" :key="index" @click="openEditorModal('exm_' + (index + 1))" :class="[ { 'is-editing': focusInput == 'exm_' + (index + 1) }, { 'active': problem.answer == index + 1 }, exm_arrangement ]"
                        span.problem-exm-index :class="{ 'active': problem.answer == index + 1 }" @click.stop="inputAnswer(index + 1)" v-text="index + 1"
                        span.problem-exm-content v-html="exm" ref="problemExmContent"
                    div.problem-answer-input v-else="!problem.is_objective"
                      input.form-control type="text" readonly="true" :value="problem.answer" @click="inputAnswer()"
                    div.problem-subject @click="openSubjectModal" v-if="show_explanation"
                      div v-if="problem.problem_subjects.length == 0"
                        span.text-danger 분류정보 없음
                      div v-else="" v-for="problem_subject in problem.problem_subjects" :key="problem_subject.subject_id"
                        span v-text='problem_subject.subject.path'
                    div.problem-explanation v-html="problem.explanation" @click="openEditorModal('explanation')" :class="{ 'is-editing': focusInput == 'explanation' }" v-if="show_explanation"
                    div.problem-answer :class="[{ 'is-editing': focusInput == 'answer' }, { 'is-objective': problem.is_objective }]" @click="inputAnswer()" v-if="show_explanation"
                      i.fa.fa-caret-right.mr-1
                      span.problem-answer-wrapper
                        span.problem-answer-seg.align-bottom v-text="problem.answer"
                      div.problem-ratio v-if="problem.is_objective && !validation.hasError('problem.exm_1_ratio') && !validation.hasError('problem.exm_2_ratio') && !validation.hasError('problem.exm_3_ratio') && !validation.hasError('problem.exm_4_ratio') && !validation.hasError('problem.exm_5_ratio')"
                        span<> v-html="'① ' + problem.exm_1_ratio + '<small>%</small>'" :class="{ 'font-weight-bold text-dark under-border': problem.answer == 1 }"
                        span<> v-html="'② ' + problem.exm_2_ratio + '<small>%</small>'" :class="{ 'font-weight-bold text-dark under-border': problem.answer == 2 }"
                        span<> v-html="'③ ' + problem.exm_3_ratio + '<small>%</small>'" :class="{ 'font-weight-bold text-dark under-border': problem.answer == 3 }"
                        span<> v-html="'④ ' + problem.exm_4_ratio + '<small>%</small>'" :class="{ 'font-weight-bold text-dark under-border': problem.answer == 4 }"
                        span<> v-html="'⑤ ' + problem.exm_5_ratio + '<small>%</small>'" :class="{ 'font-weight-bold text-dark under-border': problem.answer == 5 }"
                      div.problem-ratio v-if="!problem.is_objective && !validation.hasError('problem.correct_ratio')"
                        span v-html="problem.correct_ratio + '<small>%</small>'"
                  div.problem-sources.d-flex.justify-content-start.align-items-start.text-muted.mt-1.pl-3.pr-3 v-if="problem.problem_source_orders"
                    div.mr-2.text-nowrap
                      i.fa.fa-caret-right.mr-1
                      b 출제이력
                    div.w-100
                      div v-if="problem.problem_source_orders.length == 0"
                        span 없음
                      div v-else="" v-for="problem_source_order in problem.problem_source_orders" :key="problem_source_order.id"
                        span v-text='problem_source_order.problem_source.name + " / " + problem_source_order.order + "번"'
                  tag-input inline-template="true" :problem="problem" ref="tagInputComponent"
                    div.problem-tags v-if="problem.problem_tags"
                      a.badge.badge-secondary.mt-1.mr-1 v-for="tag in problem.problem_tags" :key="tag.id" href="#" @click.prevent="remove(tag)" v-text="tag.name"
                      div.text-right
                        a.badge.badge-success.mt-1.mr-1 href="#" @click.prevent="open" v-show="!is_opened" == "#{icon 'plus'} 추가"
                        a.badge.badge-light.mt-1.mr-1 href="#" @click.prevent="close" v-show="is_opened" == "닫기 #{icon 'remove'}"
                        div.dropdown.mt-1.d-none ref="tagSearchDropdown"
                          div.input-group
                            input.form-control ref="tagSearchInput" placeholder="태그 추가하기" :value="keyword" @input="typing" @keydown.esc.stop="reset" @keydown.enter.prevent="enter" @keydown.up.prevent="move(false)" @keydown.down.prevent="move(true)"
                            span.input-group-addon.text-muted: i.fa :class="[ is_loading ? 'fa-spinner fa-spin' : 'fa-plus' ]"
                          div.dropdown-menu.w-100.p-0 ref="tagSearchResult"
                            a.dropdown-item.pl-3.pr-3.text-info v-if="keyword.length == 0" href="#" @click.prevent="" 추가할 태그를 입력해주세요
                            a.dropdown-item.pl-3.pr-3.text-muted v-else-if="is_loading" href="#" @click.prevent="" v-text="'[' + keyword + '] 를 DB에서 검색중...'"
                            a.dropdown-item.pl-3.pr-3.text-danger v-else-if="search_results.length == 0" href="#" @click.prevent="" 이미 추가된 태그 키워드입니다
                            a.dropdown-item.pl-3.pr-3 v-else="" v-for="(tag, index) in search_results" :key="tag.name" href="#" @click.prevent="save(tag)" :class="{ 'bg-hover font-weight-bold': index == selected }"
                              div.d-flex.align-items-center.justify-content-between
                                span v-text="tag.name"
                                span.badge.badge-info.ml-2 style="font-size: 0.5em;" v-if="tag.id" v-text="tag.refer_count + '회'"
                                span.badge.badge-danger.ml-2 style="font-size: 0.5em;" v-else="" NEW
      div.col
        table.table.table-bordered
          thead.thead-default
            tr
              th.d-flex.justify-content-between.align-items-center
                span == "#{icon 'caret-down', class: 'p-1'} 최종Data"
                div
                  = f.hidden_field :is_objective, ':value': 'problem.is_objective'
                  label.m-1.mr-2 타입
                  div.btn-group.btn-group-sm
                    div.btn :class="[ problem.is_objective ? 'btn-secondary' : 'btn-outline-secondary' ]" @click="problem.is_objective = true" 객관식
                    div.btn :class="[ !problem.is_objective ? 'btn-secondary' : 'btn-outline-secondary' ]" @click="problem.is_objective = false" 주관식
          tbody
            tr
              td
                div.row
                  div.col.mb-0.pr-2
                    = f.input :year, collection: 1990..Date.today.year,
                              label: '출제년도', input_html: { 'v-model': 'problem.year' }
                  div.col.mb-0.pl-0.pr-2
                    = f.input :score, label: '점수', wrapper_html: { class: 'mb-0' }, input_html: { 'v-model.number': 'problem.score', ':class': "{ 'border-danger': validation.hasError('problem.score') }", class: 'text-right', min: 0 }
                  div.col.mb-0.pl-0
                    = f.input :level, label: '난이도', wrapper_html: { class: 'mb-0' }, input_html: { class: 'd-none', 'v-model': 'problem.level' }
                    div.btn-group.w-100
                      button.btn.w-100 :class="[ {'btn-outline-danger': validation.hasError('problem.level') }, problem.level == 1 ? 'btn-secondary' : 'btn-outline-secondary' ]" @click.prevent="problem.level = 1" 하
                      button.btn.w-100 :class="[ {'btn-outline-danger': validation.hasError('problem.level') }, problem.level == 2 ? 'btn-secondary' : 'btn-outline-secondary' ]" @click.prevent="problem.level = 2" 중
                      button.btn.w-100 :class="[ {'btn-outline-danger': validation.hasError('problem.level') }, problem.level == 3 ? 'btn-secondary' : 'btn-outline-secondary' ]" @click.prevent="problem.level = 3" 상
            / tr
            /   td
            /     = f.input :subject_id, label: '과목', wrapper_html: { class: 'mb-0' }, input_html: { class: 'd-none', 'v-model': 'problem.subject_id' }
            /     div.input-group.cursor-pointer @click.stop="openSubjectModal"
            /       input.form-control.bg-white.cursor-pointer type="text" placeholder="과목 검색" :value="problem.subject_id ? problem.subject.name : null" :class="{ 'border-danger': validation.hasError('problem.subject_id') }" @focus.stop="openSubjectModal"
            tr
              td
                = f.input :content,
                          input_html: { rows: '1', 'v-model.trim': 'problem.content', ':class': "{ 'border-danger': validation.hasError('problem.content') }", '@focus': 'focusInput = "content"', '@blur': 'focusInput = null' }
            tr v-show="problem.is_objective"
              td
                = f.input :exm_1, wrapper_html: { class: 'd-inline-block w-50 pr-1' },
                          input_html: { rows: '1', 'v-model.trim': "problem.exm_1", ':class': "{ 'border-danger': validation.hasError('problem.exm_1') }", '@focus': 'focusInput = "exm_1"', '@blur': 'focusInput = null' }
                = f.input :exm_2, wrapper_html: { class: 'd-inline-block w-50' },
                          input_html: { rows: '1', 'v-model.trim': "problem.exm_2", ':class': "{ 'border-danger': validation.hasError('problem.exm_2') }", '@focus': 'focusInput = "exm_2"', '@blur': 'focusInput = null' }
                = f.input :exm_3, wrapper_html: { class: 'd-inline-block w-50 pr-1' },
                          input_html: { rows: '1', 'v-model.trim': "problem.exm_3", ':class': "{ 'border-danger': validation.hasError('problem.exm_3') }", '@focus': 'focusInput = "exm_3"', '@blur': 'focusInput = null' }
                = f.input :exm_4, wrapper_html: { class: 'd-inline-block w-50' },
                          input_html: { rows: '1', 'v-model.trim': "problem.exm_4", ':class': "{ 'border-danger': validation.hasError('problem.exm_4') }", '@focus': 'focusInput = "exm_4"', '@blur': 'focusInput = null' }
                = f.input :exm_5, wrapper_html: { class: 'd-inline-block w-50 pr-1' },
                          input_html: { rows: '1', 'v-model.trim': "problem.exm_5", ':class': "{ 'border-danger': validation.hasError('problem.exm_5') }", '@focus': 'focusInput = "exm_5"', '@blur': 'focusInput = null' }
            tr
              td
                = f.input :answer, as: :integer, wrapper_html: { class: 'mb-0' },
                          input_html: { 'v-model.number': 'problem.answer', ':class': "{ 'border-danger': validation.hasError('problem.answer') }", '@focus': 'focusInput = "answer"', '@blur': 'focusInput = null', 'v-show': '!problem.is_objective' }
                div.btn-group.w-100 v-show="problem.is_objective"
                  button.btn.w-100 :class="[ { 'btn-outline-danger': validation.hasError('problem.answer') }, problem.answer == 1 ? 'btn-secondary' : 'btn-outline-secondary' ]" @click.prevent="problem.answer = 1" 1번
                  button.btn.w-100 :class="[ { 'btn-outline-danger': validation.hasError('problem.answer') }, problem.answer == 2 ? 'btn-secondary' : 'btn-outline-secondary' ]" @click.prevent="problem.answer = 2" 2번
                  button.btn.w-100 :class="[ { 'btn-outline-danger': validation.hasError('problem.answer') }, problem.answer == 3 ? 'btn-secondary' : 'btn-outline-secondary' ]" @click.prevent="problem.answer = 3" 3번
                  button.btn.w-100 :class="[ { 'btn-outline-danger': validation.hasError('problem.answer') }, problem.answer == 4 ? 'btn-secondary' : 'btn-outline-secondary' ]" @click.prevent="problem.answer = 4" 4번
                  button.btn.w-100 :class="[ { 'btn-outline-danger': validation.hasError('problem.answer') }, problem.answer == 5 ? 'btn-secondary' : 'btn-outline-secondary' ]" @click.prevent="problem.answer = 5" 5번
            tr v-show="problem.is_objective"
              td
                label 문항별 선택률
                div.input-group
                  = f.input :exm_1_ratio, label: false, wrapper: false, input_html: { 'v-model.number': 'problem.exm_1_ratio', placeholder: '%', ':class': "[{ 'border-danger': validation.hasError('problem.exm_1_ratio') }, { 'font-weight-bold border-secondary' : problem.answer == 1 }, { 'border-right-0' : problem.answer > 1 } ]", min: 0, max: 100, step: 1, class: 'text-right', '@input': 'inputExmRatio' }
                  = f.input :exm_2_ratio, label: false, wrapper: false, input_html: { 'v-model.number': 'problem.exm_2_ratio', placeholder: '%', ':class': "[{ 'border-danger': validation.hasError('problem.exm_2_ratio') }, { 'font-weight-bold border-secondary' : problem.answer == 2 }, { 'border-right-0' : problem.answer > 2 }, { 'border-left-0' : problem.answer < 2 } ]", min: 0, max: 100, step: 1, class: 'text-right', '@input': 'inputExmRatio' }
                  = f.input :exm_3_ratio, label: false, wrapper: false, input_html: { 'v-model.number': 'problem.exm_3_ratio', placeholder: '%', ':class': "[{ 'border-danger': validation.hasError('problem.exm_3_ratio') }, { 'font-weight-bold border-secondary' : problem.answer == 3 }, { 'border-right-0' : problem.answer > 3 }, { 'border-left-0' : problem.answer < 3 } ]", min: 0, max: 100, step: 1, class: 'text-right', '@input': 'inputExmRatio' }
                  = f.input :exm_4_ratio, label: false, wrapper: false, input_html: { 'v-model.number': 'problem.exm_4_ratio', placeholder: '%', ':class': "[{ 'border-danger': validation.hasError('problem.exm_4_ratio') }, { 'font-weight-bold border-secondary' : problem.answer == 4 }, { 'border-right-0' : problem.answer > 4 }, { 'border-left-0' : problem.answer < 4 } ]", min: 0, max: 100, step: 1, class: 'text-right', '@input': 'inputExmRatio' }
                  = f.input :exm_5_ratio, label: false, wrapper: false, input_html: { 'v-model.number': 'problem.exm_5_ratio', placeholder: '%', ':class': "[{ 'border-danger': validation.hasError('problem.exm_5_ratio') }, { 'font-weight-bold border-secondary' : problem.answer == 5 }, { 'border-left-0' : problem.answer < 5 } ]", min: 0, max: 100, step: 1, class: 'text-right', '@input': 'inputExmRatio' }
            tr v-show="!problem.is_objective"
              td
                = f.input :correct_ratio, label: '정답률', input_html: { 'v-model.number': 'problem.correct_ratio', placeholder: '%', ':class': "{ 'border-danger': validation.hasError('problem.correct_ratio') }", min: 0, max: 100, step: 1, class: 'text-right' }
            tr
              td
                = f.input :explanation,
                          input_html: { rows: '1', 'v-model.trim': 'problem.explanation', ':class': "{ 'border-danger': validation.hasError('problem.explanation') }", '@focus': 'focusInput = "explanation"', '@blur': 'focusInput = null' }
            tr
              td
                source-modal inline-template="true" :problem="problem" ref="sourceModalComponent"
                  div
                    label 문제 출처
                    ul.list-group.text-muted
                      li.list-group-item.d-flex.justify-content-between.align-items-center.p-2.pl-3.pr-3 v-for="problem_source_order in problem.problem_source_orders" :key="problem_source_order.id"
                        span v-text='problem_source_order.problem_source.name + " / " + problem_source_order.order + "번"'
                      li.list-group-item.p-2.pl-3.pr-3.text-center.list-group-item-action.list-group-item-secondary.cursor-pointer @click="openModal"
                        span v-text='"+ 출처 추가/변경/삭제"'
                    div.modal role="dialog" data-backdrop="static" ref="sourceModal"
                      div.modal-dialog.modal-lg role="document"
                        div.modal-content
                          div.modal-header
                            h5.modal-title 출처 입력하기
                            button.close type="button" data-dismiss="modal" aria-label="Close"
                              span aria-hidden="true" &times;
                          div.modal-body
                            ul.list-group.text-muted.w-100
                              li.list-group-item.d-flex.justify-content-between.align-items-center.p-2.pl-3.pr-3 v-for="problem_source_order in added" :key="problem_source_order.id"
                                span v-text='problem_source_order.problem_source.name + " / " + problem_source_order.order + "번"'
                                a.badge.badge-danger.cursor-pointer href="#" @click.prevent="remove(problem_source_order)"
                                  i.fa.fa-trash
                              li.list-group-item.list-group-item-secondary.list-group-item-action.p-2.pl-3.pr-3.text-center.cursor-pointer @click="step = 1" :key="'add'" v-if="step == 0"
                                span v-text='"+ 출처 추가"'
                              li.list-group-item.list-group-item-secondary.p-3 :key="'adding'" v-if="step > 0"
                                div.d-flex.justify-content-between.align-items-center
                                  h6.pl-1.mb-0
                                    i.fa> :class="[ tmp_source.problem_source_id ? 'fa-check text-success' : 'fa-exclamation-triangle text-danger' ]"
                                    span< v-text='tmp_source.problem_source_id ? tmp_source.problem_source.name : "STEP 1. 출처 선택"'
                                  div.d-inline-flex
                                    a.badge.badge-secondary href="#" @click.prevent="tmp_source.problem_source_id = null, tmp_source.problem_source = {}, step = 1" v-show="step != 1 && tmp_source.problem_source_id"
                                      span> 다시 선택
                                      i.fa.fa-refresh
                                div.row.mt-2 v-show="step == 1"
                                  div.col-8
                                    div.border.border-dark.rounded style="max-height: 180px; overflow: hidden"
                                      div style="max-height: 178px; overflow: scroll"
                                        table.table.table-sm.table-hover.cursor-pointer
                                          tr v-show="filtered.length == 0"
                                            td.text-center.text-muted 검색결과가 없습니다
                                          tr v-for="(source, index) in filtered" :key="source.id" @click="selectSource(source)" :class="[ tmp_source.problem_source_id == source.id ? 'bg-dark text-white' : '' ]"
                                            td
                                              div.d-flex.align-items-center.justify-content-between.pl-2.pr-2
                                                span v-text="source.name"
                                    div.d-flex.justify-content-between
                                      div
                                        span.badge.badge-secondary
                                          i.fa.fa-filter
                                          span< v-text='filtered.length + "개"'
                                      div
                                        a.badge.badge-secondary.ml-2 href="#" @click.prevent="filter.year = null" v-show="filter.year"
                                          span> v-text='filter.year + "학년도"'
                                          i.fa.fa-remove
                                        a.badge.badge-secondary.ml-2 href="#" @click.prevent="filter.time = null" v-show="filter.time"
                                          span> v-text='filter.time == 11 ? "대학수학능력시험" : filter.time + "월"'
                                          i.fa.fa-remove
                                        a.badge.badge-secondary.ml-2 href="#" @click.prevent="filter.curriculum = null" v-show="filter.curriculum"
                                          span> v-text='filter.curriculum == 1 ? "나형" : "가형"'
                                          i.fa.fa-remove
                                        a.badge.badge-dark.ml-2 href="#" @click.prevent="initFilter" v-show="filtered.length < sources.length"
                                          span> v-text='"필터 해제"'
                                          i.fa.fa-remove
                                  div.col-4.pl-0
                                    div.form-inline.mb-1
                                      label.col-3.m-0 연도
                                      select.col-9.form-control v-model="filter.year"
                                        option value="" disabled=true selected=true 연도
                                        option v-for="year in years" :key="year" :value="year" v-text="year + '학년도'"
                                    div.form-inline.mb-1
                                      label.col-3.m-0 시기
                                      select.col-9.form-control v-model="filter.time"
                                        option value="" disabled=true selected=true 시기
                                        option v-for="time in times" :key="time" :value="time" v-text="time == 11 ? '대학수학능력시험' : time + '월'"
                                    div.form-inline.mb-1
                                      label.col-3.m-0 과목
                                      select.col-9.form-control disabled=true v-model="filter.subject_id"
                                        option value="3" selected=true 수학
                                    div.form-inline.mb-1
                                      label.col-3.m-0 과정
                                      select.col-9.form-control v-model="filter.curriculum"
                                        option value="" disabled=true selected=true 과정
                                        option value="2" 가형
                                        option value="1" 나형
                                    div.form-inline
                                      label.col-3.m-0 학년
                                      select.col-9.form-control disabled=true v-model="filter.grade"
                                        option value="3" selected=true 고3
                                hr
                                div.d-flex.justify-content-between.align-items-center
                                  h6.pl-1.mb-0
                                    i.fa> :class="[ tmp_source.order ? 'fa-check text-success' : 'fa-exclamation-triangle text-danger' ]"
                                    span< v-text='tmp_source.order ? tmp_source.order + "번" : "STEP 2. 문제번호 선택"'
                                  div.d-inline-flex
                                    a.badge.badge-secondary href="#" @click.prevent="step = 2" v-show="step != 2 && tmp_source.order"
                                      span> 다시 선택
                                      i.fa.fa-refresh
                                div.border.border-dark.rounded.mt-2 style="overflow: hidden" v-show="step == 2"
                                  table.table.table-sm
                                    tr v-for="rowIndex in _.range(0, 3)" :key="rowIndex"
                                      td v-for="colIndex in _.range(rowIndex * 10 + 1, (rowIndex + 1) * 10 + 1)" :key="colIndex"
                                        div.btn.btn-block :class="[ tmp_source.order == colIndex ? 'btn-dark' : 'btn-outline-dark' ]" @click.prevent="selectOrder(colIndex)" v-text="colIndex + '번'"
                                hr
                                div.d-flex.justify-content-between.align-items-center
                                  h6.pl-1.mb-0
                                    i.fa> :class="[ step == 3 ? 'fa-check text-success' : 'fa-exclamation-triangle text-danger' ]"
                                    span> v-text='tmp_source.problem_source_id ? tmp_source.problem_source.name : "출처를 선택해주세요"'
                                    | /
                                    span< v-text='tmp_source.order ? tmp_source.order + "번" : "문제번호를 선택해주세요"'
                                hr
                                div.d-flex.justify-content-between.align-items-center
                                  div.d-inline-flex
                                    a.badge.badge-secondary href="#" @click.prevent="step = 0"
                                      span> 취소
                                      i.fa.fa-remove
                                    a.badge.badge-success.mr-2 href="#" @click.prevent="add" :disabled="step < 3"
                                      span> 추가
                                      i.fa.fa-plus
                          div.modal-footer v-show="step == 0"
                            button.btn.btn-block.btn-secondary type="button" data-dismiss="modal" 취소
                            button.btn.btn-block.btn-primary.mt-0 type="button" @click="save" 저장
            tr
              td
                = f.hidden_field :problem_image_ids, ':value': 'problem_image_ids'
                = f.hidden_field :problem_tag_ids, ':value': 'problem_tag_ids'
                = f.button :button, '저장', class: 'btn-block', ':class': '[ readySubmit ? "btn-success" : readySave ? "text-light btn-warning" : "btn-secondary" ]', '@click.prevent': 'saveProblem', data: { disable_with: "<i class='fa fa-spinner fa-spin'/>" }
  / subject-modal inline-template="true" :problem="problem" ref="subjectModalComponent"
  /   div.modal role="dialog" data-backdrop="static" ref="subjectModal"
  /     div.modal-dialog.modal-lg role="document" style="min-width: 1050px; max-width: 90%;"
  /       div.modal-content
  /         div.modal-header
  /           h5.modal-title 과목 입력하기
  /           button.close type="button" data-dismiss="modal" aria-label="Close"
  /             span aria-hidden="true" &times;
  /         div.modal-body
  /           div.border.border-info.rounded.pt-2.pb-2.pl-3.pr-3.mb-2
  /             div.text-muted v-if="!problem.subject_id" 현재 설정된 과목이 없습니다
  /             div v-else=""
  /               span.badge.badge-dark.mr-1 v-text="problem.subject.depth"
  /               span.badge.badge-info.mr-2 v-text="problem.subject.order"
  /               span.font-weight-bold.text-info v-text="problem.subject.name"
  /               br
  /               small.text-muted v-text="problem.subject.path"
  /           div.input-group.mt-2
  /             span.input-group-addon.text-muted: i.fa.fa-search
  /             input.form-control ref="subjectModalInput" placeholder="과목 검색하기" autofocus="true" :value="keyword" @input="typing" @keydown.esc.stop="reset" @keydown.enter.prevent="enter" @keydown.up.prevent="move(false)" @keydown.down.prevent="move(true)"
  /             div style="position: absolute; top: 50%; margin-top: -7px; right: 7px; z-index: 100; font-size: 0.5em;"
  /               kbd.ml-1 :class="{ 'bg-light text-secondary': keyword.length > 0 && filtered.length == 0 }" == "#{icon 'caret-up'}"
  /               kbd.ml-1 :class="{ 'bg-light text-secondary': keyword.length > 0 && filtered.length == 0 }" == "#{icon 'caret-down'}"
  /               kbd.ml-1 :class="{ 'bg-light text-secondary': keyword.length > 0 && filtered.length == 0 }" Enter:저장
  /               kbd.ml-1 :class="{ 'bg-light text-secondary': keyword.length == 0 }" ESC:리셋
  /           div.mt-2 style="max-height: calc(100vh - 280px); overflow-y: scroll;"
  /             div.jumbotron.mb-0.text-center.text-muted v-show="filtered.length == 0" 검색결과가 없습니다
  /             table.table.table-sm.table-bordered.mb-0.cursor-pointer
  /               tr v-for="(subject, index) in filtered" :key="subject.id" :class="[ subject.depth == 1 ? 'bg-secondary' : (subject.depth == 2 ? 'bg-light' : '') ]"
  /                 td @click="save(subject)" @mouseover="selected = index" :class='{ "bg-hover font-weight-bold": index == selected }'
  /                   div.d-flex.align-items-center.justify-content-between.pr-1 :class="[ subject.depth == 1 ? 'pl-1' : (subject.depth == 2) ? 'pl-4' : 'pl-5' ]"
  /                     div
  /                       span.badge.badge-dark.mr-1 v-text="subject.depth"
  /                       span.badge.badge-secondary.mr-2 :class='{ "badge-info": problem.subject_id == subject.id }' v-text="subject.order"
  /                       span :class='{ "text-info": problem.subject_id == subject.id }' v-text="subject.name"
  /                     small.text-muted v-text="subject.path"
  editor-modal inline-template="true" :problem="problem" ref="editorModalComponent"
    div.modal role="dialog" data-backdrop="static" ref="editorModal"
      div.modal-dialog.modal-fullscreen role="document"
        div.modal-content
          div.modal-header
            h5.modal-title v-text="editor.title"
            button.close type="button" data-dismiss="modal" aria-label="Close"
              span aria-hidden="true" &times;
          div.modal-body
            div.editor-grid.row
              div.col-6
                div.preview-wrapper
                  div.preview-header 미리보기
                  div.preview-content.clearfix v-html="renderedHTML"
                p.mb-0.pl-2.pr-2.pt-2.text-muted style="font-size: 0.75em;"
                  | - 수식 입력 : $$ 사이에 수식을 입력 (<a href="https://khan.github.io/KaTeX/function-support" target="_blank">수식 참고 링크</a>) <br>
                  | - 가로줄 삽입 : ctrl + 엔터
              div.col-6
                div.editor-wrapper v-html="editor.content"
          div.modal-footer
            button.btn.btn-block.btn-secondary type="button" data-dismiss="modal" 취소
            button.btn.btn-block.btn-primary.mt-0 type="button" @click="save" 저장
  graph-modal inline-template="true" ref="graphModalComponent"
    div.modal role="dialog" data-backdrop="static" ref="graphModal"
      div.modal-dialog.modal-fullscreen role="document"
        div.modal-content
          div.modal-header
            h5.modal-title 그래프 입력하기
            button.close type="button" data-dismiss="modal" aria-label="Close"
              span aria-hidden="true" &times;
          div.modal-body
            graph-editor v-bind="graphData" :key="graphData.id" ref="graphEditor" v-if="graphData"
          div.modal-footer
            button.btn.btn-block.btn-secondary type="button" data-dismiss="modal" 취소
            button.btn.btn-block.btn-primary.mt-0 type="button" @click="saveGraph" 저장

javascript:
  var data = {
    problem: #{{ problem.with_details_as_json.to_json.html_safe }},
    subjects: #{{ Subject.where('subjects.order > 3000000 AND subjects.order < 4000000').to_json.html_safe }},
    sources: #{{ Admin::ProblemSource.all.to_json.html_safe }}
  };

  // var subjectModalComponent = {
  //   props: ['problem'],
  //   data: function() {
  //     return {
  //       subjects: data.subjects,
  //       keyword: '',
  //       selected: 0
  //     }
  //   },
  //   watch: {
  //     keyword: function(keyword) {
  //       this.selected = 0;
  //       this.filtered = _.filter(this.subjects, function(obj){ return obj['path'].match(new RegExp(keyword)); });
  //     }
  //   },
  //   methods: {
  //     typing: function(e) { return this.keyword = e.target.value; },
  //     reset: function() { return this.keyword = ''; },
  //     move: function(is_down) {
  //       if (is_down) {
  //         if (this.selected == this.filtered.length - 1) return this.selected = 0;
  //         return this.selected += 1;
  //       } else {
  //         if (this.selected == 0) return this.selected = this.filtered.length - 1;
  //         return this.selected -= 1;
  //       }
  //     },
  //     enter: function() {
  //       if (this.filtered.length == 0) {
  //         return this.reset();
  //       } else {
  //         return this.save(this.filtered[this.selected]);
  //       }
  //     },
  //     open: function() {
  //       this.keyword = '';
  //       $(this.$refs.subjectModal).modal();
  //       $(this.$refs.subjectModalInput).trigger('focus');
  //     },
  //     save: function(subject) {
  //       if (subject.depth != 3 && !confirm('소과목을 선택하지 않으셨습니다. 맞게 선택했나요?')) return false;
  //       this.problem.subject = subject;
  //       this.problem.subject_id = subject.id;
  //       return $(this.$refs.subjectModal).modal('hide');
  //     }
  //   },
  //   created: function() {
  //     this.filtered = this.subjects;
  //     this.selected = _.findIndex(this.filtered, {id: this.problem.subject_id});
  //   }
  // }

  var tagInputComponent = {
    props: ['problem'],
    data: function() {
      return {
        keyword: '',
        search_results: [],
        is_opened: false,
        is_loading: false,
        selected: 0
      }
    },
    methods: {
      open: function() {
        this.is_opened = true;
        $(this.$refs.tagSearchDropdown).removeClass('d-none');
        $(this.$refs.tagSearchResult).addClass('show');
        return $(this.$refs.tagSearchInput).focus();
      },
      close: function() {
        this.reset();
        this.is_opened = false;
        $(this.$refs.tagSearchDropdown).addClass('d-none');
      },
      remove: function(tag) {
        return this.problem.problem_tags = _.without(this.problem.problem_tags, tag);
      },
      typing: function(e) {
        var keyword = e.target.value;
        if (keyword.length == 0) {
          this.reset();
        } else if (keyword != this.keyword) {
          this.keyword = keyword;
          this.is_loading = true;
          this.search();
        }
      },
      reset: function() {
        this.keyword = '';
        this.search_results = [];
        this.selected = 0;
        this.is_loading = false;
      },
      search: _.debounce(function() {
        $.ajax({
          url: '#{{ admin_problem_tags_path }}',
          data: { q: this.keyword.replace(/\s/g, '') },
          dataType: 'json',
          success: function(data) {
            if (this.is_loading) {
              this.search_results = data;
              var ids = _.pluck(this.problem.problem_tags, 'id');
              this.search_results = _.filter(this.search_results, function(result) {
                return ids.indexOf(result.id) < 0;
              }.bind(this));
              var keywords = _.union(_.pluck(this.problem.problem_tags, 'keyword'), _.pluck(this.search_results, 'keyword'));
              if (keywords.indexOf(this.keyword.replace(/\s/g, '')) < 0) this.search_results.unshift({ id: null, name: this.keyword, keyword: this.keyword.replace(/\s/g, ''), refer_count: 0 });
            }
          }.bind(this),
          beforeSend: function() {
            this.selected = 0;
          }.bind(this),
          complete: function() {
            this.is_loading = false;
          }.bind(this)
        });
      }, 500),
      move: function(is_down) {
        if (is_down) {
          if (this.selected == this.search_results.length - 1) return this.selected = 0;
          return this.selected += 1;
        } else {
          if (this.selected == 0) return this.selected = this.search_results.length - 1;
          return this.selected -= 1;
        }
      },
      enter: function() {
        if (this.is_loading || this.keyword.length == 0) {
          return false;
        } else if (this.search_results.length == 0) {
          return this.reset();
        } else {
          return this.save(this.search_results[this.selected]);
        }
      },
      save: function(tag) {
        if (tag.id) {
          this.reset();
          this.problem.problem_tags.push(tag);
        } else {
          $.ajax({
            url: "#{{ admin_problem_tags_path }}",
            type: 'POST',
            data: { admin_problem_tag: { name: this.keyword } },
            dataType: 'json',
            success: function(data) {
              this.problem.problem_tags.push(data);
            }.bind(this),
            beforeSend: function() {
              this.reset();
            }.bind(this)
          });
        }
      }
    }
  }

  var sourceModalComponent = {
    props: ['problem'],
    data: function() {
      return {
        sources: data.sources,
        added: [],
        tmp_source: {
          id: null,
          order: null,
          problem_id: null,
          problem_source: {},
          problem_source_id: null
        },
        step: 0,
        filtered: [],
        filter: {
          year: null,
          time: null,
          subject_id: 3,
          curriculum: null,
          grade: 3
        }
      }
    },
    computed: {
      years: function() { return _.sortBy(_.uniq(_.pluck(this.sources, 'year'))); },
      times: function() { return _.sortBy(_.uniq(_.pluck(this.sources, 'time'))); }
    },
    watch: {
      step: function() {
        if (this.step == 0) return this.tmp_source = {
          id: null,
          order: null,
          problem_id: this.problem.id,
          problem_source: {},
          problem_source_id: null
        }
      },
      filter: {
        deep: true,
        handler: function() {
          this.filtered = this.sources;
          if (this.filter.year) this.filtered = _.filter(this.filtered, function(obj){ return obj['year'] == this.filter.year; }.bind(this));
          if (this.filter.time) this.filtered = _.filter(this.filtered, function(obj){ return obj['time'] == this.filter.time; }.bind(this));
          if (this.filter.curriculum) this.filtered = _.filter(this.filtered, function(obj){ return obj['curriculum'] == this.filter.curriculum; }.bind(this));
        }
      }
    },
    methods: {
      openModal: function() {
        this.step = 0;
        this.initFilter();
        this.added = _.clone(this.problem.problem_source_orders);
        return $(this.$refs.sourceModal).modal();
      },
      remove: function(source) {
        return this.added = _.without(this.added, source);
      },
      initFilter: function() {
        this.filter = {
          year: null,
          time: null,
          subject_id: 3,
          curriculum: null,
          grade: 3
        };
        this.filtered = this.sources;
      },
      selectSource: function(source) {
        this.tmp_source.problem_source_id = source.id;
        this.tmp_source.problem_source = source;
        return this.step = 2;
      },
      selectOrder: function(order) {
        this.tmp_source.order = order;
        return this.step = 3;
      },
      add: function(order) {
        if (!this.tmp_source.problem_source_id || !this.tmp_source.order) {
          console.log('선택해주세요');
          return false;
        } else if (_.contains(_.pluck(this.added, 'problem_source_id'), this.tmp_source.problem_source_id) && _.contains(_.pluck(this.added, 'order'), this.tmp_source.order)) {
          console.log('이미 존재하는 번호');
        } else {
          this.added.push(this.tmp_source);
          return this.step = 0;
        }
      },
      save: function() {
        // this.problem.problem_source_orders.push(order);
        return $(this.$refs.sourceModal).modal('hide');
      }
    },
    mounted: function() { this.$validate(); },
    validators: {
      'filter.year': function(value) { return Validator.value(value).required(); },
      'filter.time': function(value) { return Validator.value(value).required(); },
      'filter.subject_id': function(value) { return Validator.value(value).required(); },
      'filter.curriculum': function(value) { return Validator.value(value).required(); },
      'filter.grade': function(value) { return Validator.value(value).required(); },
    }
  }


  var editorModalComponent = {
    props: ['problem'],
    data: function() {
      return {
        editor: {
          target: null,
          title: null,
          content: null
        }
      }
    },
    computed: {
      renderedHTML: function() {
        var content = this.$parent.insanitizeHTML(this.editor.content);
        if (content == '<div><br></div>') return '';
        var eqs = content ? content.match(/\$[^\$]*\$/g) : [];
        _.each(eqs, function(eq) {
          var nodes = $.parseHTML(eq),
              annotation = _.compact(_.map(nodes, function(node) {
                return node = $(node).text();
              })).join('');
          try {
            content = content.replace(eq, katex.renderToString(annotation.replace(/\s/g, ' ').replace(/^\$|\$$/g, '')));
          } catch(err) {
            content = content.replace(eq, '<mark class="bg-danger text-light">' + eq + '</mark>');
          }
        });
        return content;
      }
    },
    methods: {
      open: function(type) {
        this.$parent.focusInput = type;
        this.editor.target = type;
        this.editor.title = (type == 'content' ? '문제' : (type == 'explanation' ? '해설' : '보기')) + ' 입력하기';
        this.editor.content = this.$parent.insanitizeHTML(this.problem[type]);

        this.$nextTick(function() {
          $(this.$refs.editorModal)
            .on('hide.bs.modal', function(e) {
              $(window).trigger('resize');
              $(this.$refs.summernote).summernote('destroy');
              this.$parent.focusInput = null;
              this.editor.target = null;
              this.editor.title = null;
              this.editor.content = null;
            }.bind(this)).modal({
              keyboard: false
            });
          this.$refs.summernote = $(this.$refs.editorModal).find('.editor-wrapper').summernote({
            width: 500,
            focus: true,
            placeholder: '내용을 입력해주세요',
            dialogsInBody: true,
            styleWithSpan: false,
            insertTableMaxSize: {
              col: 20,
              row: 20
            },
            toolbar: [
              ['insert', ['picture', 'addGraph', 'block', 'table', 'hr']],
              ['misc', ['codeview', 'undo', 'redo']]
            ],
            popover: {
              air: [
                ['para', ['style', 'paragraph', 'height', 'ul', 'ol']],
                ['font', ['fontsize', 'bold', 'italic', 'underline', 'strikethrough', 'superscript', 'subscript']], //, 'color']],
                ['styleclear', ['clear']],
              ],
              image: [
                ['imagesize', ['imageSize100', 'imageSize50', 'imageSize25']],
                ['float', ['floatLeft', 'floatRight', 'floatNone']],
                ['remove', ['removeMedia']]
              ],
              link: [
                ['link', ['linkDialogShow', 'unlink']]
              ],
              table: [
                ['align', ['alignLeftTD', 'alignCenterTD', 'alignRightTD']],
                ['style', ['addTDColor', 'removeTDColor']],
                ['add', ['addRowDown', 'addRowUp', 'addColLeft', 'addColRight']],
                ['delete', ['deleteRow', 'deleteCol']],
                ['deleteAll', ['deleteTable']]
              ]
            },
            buttons: {
              addGraph: function(context) {
                return $.summernote.ui.button({
                  contents: '<i class="fa fa-area-chart"/>',
                  tooltip: '그래프',
                  click: function () {
                    this.$parent.$refs.graphModalComponent.graphData = {
                      id: Math.round(Math.random() * 1000000),
                      board: {
                        width: 400, height: 300, padding: 20, square: 1,
                        xmax: 5, xmin: -5, ymax: 4, ymin: -4,
                        doGrids: 1, showXgrid: 1, showYgrid: 1, gdx: 1, gdy: 1,
                        doAxes: 1, showXaxis: 1, showYaxis: 1, showXmarks: 1, showYmarks: 1, showXlabels: 1, showYlabels: 1, dx: 1, dy: 1,
                        isDrawing: false, current_c: [], previews: [], drawingHandler: null, drawingData: [], drawingTip: '',
                        fontfamily: 'KaTeX_Math, Times New Roman, Times, sans-serif',
                      },
                      customs: []
                    }
                    $(this.$parent.$refs.graphModalComponent.$refs.graphModal).modal();
                    return false;
                  }.bind(this)
                }).render();
              }.bind(this),
              alignLeftTD: function(context) {
                return $.summernote.ui.button({
                  contents: '<i class="fa fa-align-left"></i>',
                  tooltip: '왼쪽 정렬',
                  click: function() {
                    var nodes = this.getTargetTD(context);
                    _.each(nodes, function(node) {
                      $(node).removeClass('text-center text-right');
                    })
                    return context.triggerEvent('change', context.code());
                  }.bind(this)
                }).render();
              }.bind(this),
              alignCenterTD: function(context) {
                return $.summernote.ui.button({
                  contents: '<i class="fa fa-align-center"></i>',
                  tooltip: '가운데 정렬',
                  click: function() {
                    var nodes = this.getTargetTD(context);
                    _.each(nodes, function(node) {
                      $(node).removeClass('text-center text-right').addClass('text-center');
                    })
                    return context.triggerEvent('change', context.code());
                  }.bind(this)
                }).render();
              }.bind(this),
              alignRightTD: function(context) {
                return $.summernote.ui.button({
                  contents: '<i class="fa fa-align-right"></i>',
                  tooltip: '오른쪽 정렬',
                  click: function() {
                    var nodes = this.getTargetTD(context);
                    _.each(nodes, function(node) {
                      $(node).removeClass('text-center text-right').addClass('text-right');
                    })
                    return context.triggerEvent('change', context.code());
                  }.bind(this)
                }).render();
              }.bind(this),
              addTDColor: function(context) {
                return $.summernote.ui.button({
                  contents: '<i class="fa fa-paint-brush"></i>',
                  tooltip: '배경 색상을 추가합니다',
                  click: function() {
                    var nodes = this.getTargetTD(context);
                    _.each(nodes, function(node) {
                      $(node).addClass('table-secondary');
                    })
                    return context.triggerEvent('change', context.code());
                  }.bind(this)
                }).render();
              }.bind(this),
              removeTDColor: function(context) {
                return $.summernote.ui.button({
                  contents: '<i class="fa fa-eraser"></i>',
                  tooltip: '배경 색상을 제거합니다',
                  click: function() {
                    var nodes = this.getTargetTD(context);
                    _.each(nodes, function(node) {
                      $(node).removeClass('table-secondary');
                    })
                    return context.triggerEvent('change', context.code());
                  }.bind(this)
                }).render();
              }.bind(this)
            },
            callbacks: {
              onInit: function() {
                $(this.$refs.editorModal)
                  .find('.note-editable')
                  .on('DOMNodeInserted', function(e) {
                    if (e.target.nodeName == 'SPAN') $(e.target).replaceWith($(e.target).html());
                  })
                  .on('contextmenu', function(e) { e.preventDefault(); });
              }.bind(this),
              onChange: function(content, context) {
                this.editor.content = content;
              }.bind(this),
              onPaste: function(e) {
                e.preventDefault();
                $(this.$refs.summernote).summernote('insertText', e.originalEvent.clipboardData.getData('text'));
              }.bind(this),
              onImageUpload: function(files) {
                _.each(files, function(file) {
                  this.$parent.uploadImage(file, function(data) {
                    var img = document.createElement('img');
                    img.dataset.id = data.image.id;
                    img.src = data.image.image_url;
                    $(this.$refs.summernote).summernote('insertNode', img);
                  }.bind(this))
                }.bind(this));
              }.bind(this)
            }
          });
        }.bind(this));
      },
      getTargetTD: function(context) {
        var target = [];
        var dom = $.summernote.dom;
        var range = context.invoke('createRange'),
            sc = dom.ancestor(range.sc, dom.isCell),
            ec = dom.ancestor(range.ec, dom.isCell);

        var t = sc.closest('table'),
            trs = t.getElementsByTagName('tr'),
            tds = t.getElementsByTagName('td'),
            t_index = [trs.length, tds.length / trs.length],
            s_td = sc, s_tr = s_td.closest('tr'), s_index = [s_tr.rowIndex, s_td.cellIndex],
            e_td = ec, e_tr = e_td.closest('tr'), e_index = [e_tr.rowIndex, e_td.cellIndex],
            s_td_index = s_tr.rowIndex * t_index[1] + s_td.cellIndex,
            e_td_index = e_tr.rowIndex * t_index[1] + e_td.cellIndex;

        for (var i = s_td_index; i <= e_td_index; i++) {
          target.push(tds[i]);
        }

        return target;
      },
      save: function() {
        var content = this.$parent.sanitizeHTML(this.editor.content);

        if (!this.$parent.equationCheck(content)) {
          return alert('수식 오류가 있습니다. 확인해주세요!');
        } else {
          this.problem[this.editor.target] = content;
          return $(this.$refs.editorModal).modal('hide');
        }
      }
    }
  };

  var graphModalComponent = {
    data: function() {
      return {
        graphData: null
      }
    },
    components: {
      'graph-editor': graphEditorComponent
    },
    methods: {
      saveGraph: function() {
        var result = this.$refs.graphEditor.$refs.graphPreview.firstElementChild;
        $(result).attr('contenteditable', false);
        $(this.$parent.$refs.editorModalComponent.$refs.summernote).summernote('insertNode', result);
        return $(this.$refs.graphModal).modal('hide');
      }
    }
  };

  // var sourceModalComponent = {
  //   props: ['problem'],
  //   data: function() {
  //     return {
  //       prev: null,
  //       source: null,
  //       order: null,
  //       keyword: null,
  //       occupied_orders: null,
  //       is_loading: null
  //     }
  //   },
  //   computed: {
  //     origin_title: function() { return this.naming(this.prev); },
  //     new_title: function() { return this.readySource ? this.naming(this.keyword) : '출처 내용을 선택해주세요'; },
  //     readySource: function() { return !!this.keyword.year && !!this.keyword.time && !!this.keyword.subject_id && !!this.keyword.curriculum && !!this.keyword.grade; },
  //     hasChanged: function() { return !!this.order && (this.origin_title !== this.new_title || this.order !== this.problem.problem_source_order); },
  //     readySubmit: function() { return !!this.order && this.readySource; }
  //   },
  //   watch: {
  //     keyword: {
  //       deep: true,
  //       handler: function() {
  //         if (!this.keyword.year || !this.keyword.time || !this.keyword.subject_id || !this.keyword.curriculum || !this.keyword.grade) return;
  //         var self = this;
  //         $.ajax({
  //           url: '#{{ source_admin_problems_path }}',
  //           type: 'GET',
  //           dataType: 'json',
  //           data: { problem_id: self.problem.id, source: self.keyword },
  //           beforeSend: function() {
  //             self.is_loading = true;
  //           },
  //           success: function(data) {
  //             self.is_loading = false;
  //             if (self.problem.problem_source_id == data.source.id) {
  //               self.order = self.problem.problem_source_order;
  //             } else {
  //               self.order = null;
  //             }
  //             self.source = data.source;
  //             self.occupied_orders = data.occupied_orders;
  //           }
  //         });
  //       }
  //     }
  //   },
  //   methods: {
  //     naming: function (source) {
  //       if (!source) return '현재 설정된 출처가 없습니다';
  //       var title = ['(연도)', '(시기)', '(과목)', '(과정)', '(학년)'];
  //       title[0] = source.year + '학년도';
  //       title[1] = source.time == 11 ? '대학수학능력시험' : source.time + '월';
  //       title[2] = source.subject_id == 3 ? '수학' : '기타';
  //       if (source.year == '2014' || source.year == '2015') {
  //         title[3] = source.curriculum == 1 ? '나형(A형)' : source.curriculum == 2 ? '가형(B형)' : '공통';
  //       } else {
  //         title[3] = source.curriculum == 1 ? '나형' : source.curriculum == 2 ? '가형' : '공통';
  //       }
  //       title[4] = '고' + source.grade;
  //       return title.join('_');
  //     },
  //     init: function() {
  //       this.prev = _.clone(this.problem.problem_source);
  //       this.source = _.clone(this.prev) || {
  //         year: null,
  //         time: null,
  //         subject_id: 3,
  //         curriculum: null,
  //         grade: 3
  //       };
  //       this.order = _.clone(this.problem.problem_source_order);
  //       this.keyword = _.clone(this.source);
  //       this.occupied_orders = _.range(1, 31);
  //     },
  //     open: function() {
  //       return $(this.$refs.sourceModal).modal();
  //     },
  //     save: function() {
  //       this.problem.problem_source = this.source;
  //       this.problem.problem_source_id = this.source.id;
  //       this.problem.problem_source_order = this.order;
  //       this.problem.year = this.source.year;
  //       this.init();
  //       return $(this.$refs.sourceModal).modal('hide');
  //     }
  //   },
  //   created: function() { this.init(); },
  //   mounted: function() { this.$validate(); },
  //   validators: {
  //     'keyword.year': function(value) { return Validator.value(value).required(); },
  //     'keyword.time': function(value) { return Validator.value(value).required(); },
  //     'keyword.subject_id': function(value) { return Validator.value(value).required(); },
  //     'keyword.curriculum': function(value) { return Validator.value(value).required(); },
  //     'keyword.grade': function(value) { return Validator.value(value).required(); },
  //   }
  // }

  const noDelimiter = {replace: () => '(?!x)x'}; // return a non-matching regexp.

  var vm = new Vue({
    el: '#problem-edit',
    delimiters: [noDelimiter, noDelimiter],
    data: {
      problem: data.problem,
      show_explanation: true,
      exm_arrangement: 'w-20',
      focusInput: null
    },
    components: {
      // 'subject-modal' : subjectModalComponent,
      'tag-input'     : tagInputComponent,
      'editor-modal'  : editorModalComponent,
      'graph-modal'   : graphModalComponent,
      'source-modal'  : sourceModalComponent
    },
    computed: {
      exm_ratio_sum: function() { return 100 === _.reduce([this.problem.exm_1_ratio, this.problem.exm_2_ratio, this.problem.exm_3_ratio, this.problem.exm_4_ratio, this.problem.exm_5_ratio], function(acc, ratio){ return acc + Math.abs(ratio); }, 0); },
      problem_source_order_ids: function() { return _.pluck(this.problem.problem_source_orders, 'id'); },
      problem_image_ids: function() { return _.pluck(this.problem.problem_images, 'id'); },
      problem_tag_ids: function() { return _.pluck(this.problem.problem_tags, 'id'); },
      readySubmit: function() { return this.validation.countErrors() === 0; },
      readySave: function() {
        return !this.validation.hasError('problem.content')
                && !this.validation.hasError('problem.explanation')
                && !this.validation.hasError('problem.exm_1')
                && !this.validation.hasError('problem.exm_2')
                && !this.validation.hasError('problem.exm_3')
                && !this.validation.hasError('problem.exm_4')
                && !this.validation.hasError('problem.exm_5')
                && !this.validation.hasError('problem.score')
                && !this.validation.hasError('problem.answer');
      },
    },
    methods: {
      exmRearrange: function() {
        var w = 'w-100';
        if (_.every(_.map(this.$refs.problemExmContent, function(span) { return span.clientWidth <= 190; }))) w = 'w-50';
        if (_.every(_.map(this.$refs.problemExmContent, function(span) { return span.clientWidth <= 100; }))) w = 'w-33';
        if (_.every(_.map(this.$refs.problemExmContent, function(span) { return span.clientWidth <= 45; }))) w = 'w-20';
        return this.exm_arrangement = w;
      },
      openSubjectModal: function() { return this.$refs.subjectModalComponent.open(); },
      openSourceModal: function() { return this.$refs.sourceModalComponent.open(); },
      openEditorModal: function(type) { return this.$refs.editorModalComponent.open(type); },
      uploadImage: function(file, successCallback) {
        var formData = new FormData();
        formData.append('File', file);
        $.ajax({
          url: '#{{ admin_problem_images_path }}',
          type: 'POST',
          dataType: 'json',
          data: formData,
          contentType: false,
          processData: false,
          async: false,
          success: function(data) {
            if (data.status == 200) {
              data.image.image_url = data.url;
              this.problem.problem_images.push(data.image);
              successCallback(data);
            } else {
              console.error('이미지 업로드 실패');
            }
          }.bind(this)
        });
      },
      inputLevel: function(e, level) { if (e.buttons == 1) this.problem.level = level; },
      inputScore: function(score) {
        if (_.isNull(score) || _.isUndefined(score)) {
          return vex.dialog.prompt({
            unsafeMessage: '<i class="fa fa-caret-right"></i> <b>점수를 입력해주세요</b><br><small class="text-muted">1점 이상의 정수로 입력하세요</small>',
            placeholder: this.problem.score,
            callback: function(score) {
              if (score) {
                score = Number(score);
                if (!_.contains([2,3,4], score)) {
                  vex.dialog.confirm({
                    unsafeMessage: '통상적으로 점수는 2점/3점/4점으로 구성되어 있습니다.<br>그래도 <b>' + score + '점</b>으로 설정하시겠어요?',
                    callback: function (value) {
                      if (value) this.problem.score = score;
                    }.bind(this)
                  });
                } else {
                  this.inputScore(score);
                }
              }
            }.bind(this),
            afterOpen: function() {
              $(this.contentEl.querySelector('input')).addClass('text-right').attr('autocomplete', 'off');
            },
            beforeClose: function() {
              if (this.value && !_.isEmpty(this.value.vex)) {
                var score = Number(this.value.vex),
                    alertCallback = function() { $(this.form.querySelector('input')).focus() }.bind(this);
                if (_.isNaN(score)) {
                  vex.dialog.alert({ message: '점수를 숫자로 입력해주세요', callback: alertCallback });
                  return false;
                } else if (score != parseInt(score)) {
                  vex.dialog.alert({ message: '점수는 정수로 입력해주세요', callback: alertCallback });
                  return false;
                } else if (score <= 0) {
                  vex.dialog.alert({ message: '점수는 1점 이상 입력해주세요', callback: alertCallback });
                  return false;
                }
              }
              return true;
            }
          });
        } else {
          return this.problem.score = Number(score);
        }
      },
      inputAnswer: function(answer) {
        if (_.isNull(answer) || _.isUndefined(answer)) {
          if (this.problem.is_objective) {
            var current_answer = this.problem.answer;
            return vex.dialog.open({
              unsafeMessage: '<i class="fa fa-caret-right"></i> <b>객관식 정답을 선택해주세요</b><br><small class="text-muted">1번 ~ 5번 중에서 입력해주세요</small>',
              input: [
                '<div id="answer-input-buttons">',
                  '<div class="btn-group w-100">',
                    '<button class="btn w-100" :class="[ answer == 1 ? \'btn-secondary\' : \'btn-outline-secondary\' ]" @click="answer = 1">1번</button>',
                    '<button class="btn w-100" :class="[ answer == 2 ? \'btn-secondary\' : \'btn-outline-secondary\' ]" @click="answer = 2">2번</button>',
                    '<button class="btn w-100" :class="[ answer == 3 ? \'btn-secondary\' : \'btn-outline-secondary\' ]" @click="answer = 3">3번</button>',
                    '<button class="btn w-100" :class="[ answer == 4 ? \'btn-secondary\' : \'btn-outline-secondary\' ]" @click="answer = 4">4번</button>',
                    '<button class="btn w-100" :class="[ answer == 5 ? \'btn-secondary\' : \'btn-outline-secondary\' ]" @click="answer = 5">5번</button>',
                  '</div>',
                  '<input name="answer" type="hidden" v-model="answer"/>',
                '</div>',
              ].join(''),
              buttons: [
                { type: 'cancel', text: 'CANCEL', className: 'vex-dialog-button-secondary' }
              ],
              callback: function(value) {
                if (value.answer) this.inputAnswer(Number(value.answer));
                keyboardJS.setContext('global');
              }.bind(this),
              afterOpen: function() {
                new Vue({
                  el: '#answer-input-buttons',
                  data: { answer: current_answer },
                  methods: {},
                  mounted: function() {
                    keyboardJS.withContext('answer-input-buttons', function() {
                      keyboardJS.bind('1', function(e) { this.answer = 1; $(this.$el.querySelectorAll('button')[0]).focus(); }.bind(this));
                      keyboardJS.bind('2', function(e) { this.answer = 2; $(this.$el.querySelectorAll('button')[1]).focus(); }.bind(this));
                      keyboardJS.bind('3', function(e) { this.answer = 3; $(this.$el.querySelectorAll('button')[2]).focus(); }.bind(this));
                      keyboardJS.bind('4', function(e) { this.answer = 4; $(this.$el.querySelectorAll('button')[3]).focus(); }.bind(this));
                      keyboardJS.bind('5', function(e) { this.answer = 5; $(this.$el.querySelectorAll('button')[4]).focus(); }.bind(this));
                    }.bind(this));
                    keyboardJS.setContext('answer-input-buttons');
                  }
                })
              }
            });
          } else {
            return vex.dialog.prompt({
              unsafeMessage: '<i class="fa fa-caret-right"></i> <b>주관식 정답을 입력해주세요</b><br><small class="text-muted">0 ~ 999 사이의 정수로 입력하세요</small>',
              placeholder: this.problem.answer,
              callback: function(answer) {
                if (answer) {
                  answer = Number(answer);
                  this.inputAnswer(answer);
                }
              }.bind(this),
              afterOpen: function() {
                $(this.contentEl.querySelector('input')).addClass('text-right').attr('autocomplete', 'off');
              },
              beforeClose: function() {
                if (this.value && !_.isEmpty(this.value.vex)) {
                  var answer = Number(this.value.vex),
                      alertCallback = function() { $(this.form.querySelector('input')).focus() }.bind(this);
                  if (_.isNaN(answer)) {
                    vex.dialog.alert({ message: '정답을 숫자로 입력해주세요', callback: alertCallback });
                    return false;
                  } else if (answer != parseInt(answer)) {
                    vex.dialog.alert({ message: '정답은 정수로 입력해주세요', callback: alertCallback });
                    return false;
                  } else if (answer < 0 || answer > 999) {
                    vex.dialog.alert({ message: '주관식 정답은 0 ~ 999 사이의 숫자로 입력해주세요', callback: alertCallback });
                    return false;
                  }
                }
                return true;
              }
            });
          }
        } else {
          return this.problem.answer = Number(answer);
        }
      },
      inputExmRatio: function(e) {
        if (e.target.nextSibling !== null) this.problem.exm_5_ratio = 100 - this.problem.exm_1_ratio - this.problem.exm_2_ratio - this.problem.exm_3_ratio - this.problem.exm_4_ratio;
        if (this.problem.answer) this.problem.correct_ratio = [this.problem.exm_1_ratio, this.problem.exm_2_ratio, this.problem.exm_3_ratio, this.problem.exm_4_ratio, this.problem.exm_5_ratio][this.problem.answer - 1];
      },
      renderMath: _.debounce(function() {
        renderMathInElement(this.$refs.problemPreview, {
          delimiters: [ { left: "$",  right: "$",  display: false } ],
          errorCallback: function() { return null; }
        });
        this.exmRearrange();
      }, 250),
      textareaCheck: function(e, textarea = e.target) {
        if (this.equationCheck(textarea.value)) {
          $(textarea).removeClass('bg-danger border-white text-light');
          return true;
        } else {
          $(textarea).addClass('bg-danger border-white text-light');
          return false;
        }
      },
      equationCheck: function(content) {
        var err_check = 0;
        var eqs = content ? content.match(/\$[^\$]*\$/g) : [];
        _.each(eqs, function(eq) {
          var nodes = $.parseHTML(eq),
              annotation = _.compact(_.map(nodes, function(node) {
                return node = $(node).text();
              })).join('');
          try {
            katex.renderToString(annotation.replace(/\s/g, ' ').replace(/^\$|\$$/g, ''))
          } catch(err) {
            err_check += 1;
          }
        });
        return err_check == 0;
      },
      sanitizeHTML: function(content) {
        // 편집용 String → HTML 변환 → UNESCAPING → 저장용 String

        var div = document.createElement('div');
        div.innerHTML = content;
        _.each(div.querySelectorAll('*'), function(node, index) {
          if (node.style.length == 0) node.removeAttribute('style');
          if (node.classList.length == 0) node.removeAttribute('class');
          if (node.childNodes.length > 1 && node.firstChild.nodeName == 'BR') node.removeChild(node.firstChild);
          if (node.childNodes.length > 1 && node.lastChild.nodeName == 'BR') node.removeChild(node.lastChild);
        });
        content = div.innerHTML;

        var nodes = $.parseHTML(content);
        content = _.compact(_.map(nodes, function(node) {
          if (node.nodeType == 1) {
            node.innerHTML = node.innerHTML.trim();
            if (node.nodeName == 'DIV' && node.innerHTML.length == 0) return '';
            if (node.nodeName == 'BR' || (node.childNodes.length == 1 && node.firstChild.nodeName == 'BR')) return '<br>';
            if (!Number.isNaN(Number(node.innerHTML)) && node.innerHTML.indexOf('$') == -1) node.innerHTML = '$' + node.innerHTML + '$';
            return node.outerHTML;
          } else if (node.nodeType == 3 && (node.nodeValue = node.nodeValue.trim(), node.nodeValue.length > 0)) {
            if (!Number.isNaN(Number(node.nodeValue)) && node.nodeValue.indexOf('$') == -1) node.nodeValue = '$' + node.nodeValue + '$';
            return '<div>' + node.nodeValue + '</div>';
          } else {
            return '';
          }
        }.bind(this))).join('\n');

        var eqs = content ? content.match(/\$[^\$]*\$/g) : [];
        _.each(eqs, function(eq) {
          var nodes = $.parseHTML(eq),
              annotation = _.compact(_.map(nodes, function(node) {
                return node = $(node).text().replace(/>/g, '{\\gt}').replace(/</g, '{\\lt}').replace(/\n|\r/g, '').replace(/\s/g, ' ');
              })).join('\n');
          content = content.replace(eq, annotation);
        });

        return content;
      },
      insanitizeHTML: function(content) {
        // 저장용 String → HTML 변환 → ESCAPING → 편집용 String

        var nodes = $.parseHTML(content);
        content = _.compact(_.map(nodes, function(node) {
          if (node.nodeType == 1) {
            if (node.nodeName == 'BR' || (node.childNodes.length == 1 && node.firstChild.nodeName == 'BR')) return '<div><br></div>';
            return node.outerHTML;
          } else if (node.nodeType == 3 && (node.nodeValue = node.nodeValue.trim(), node.nodeValue.length > 0)) {
            return '<div>' + node.nodeValue + '</div>';
          } else {
            return '';
          }
        }.bind(this))).join('\n');

        var eqs = content ? content.match(/\$[^\$]*\$/g) : [];
        _.each(eqs, function(eq) {
          var nodes = $.parseHTML(eq),
              annotation = _.compact(_.map(nodes, function(node) {
                return node = $(node).text().replace(/^\$|\$$/g, '').trim().replace(/\n|\r/g, '<br>').replace(/\s/g, '&nbsp;');
              })).join('<br>');
          content = content.replace(eq, '$' + annotation + '$');
        });

        return content;
      },
      initHTML: function(content) {
        var div = document.createElement('div');
        div.innerHTML = content;
        var all_nodes = div.querySelectorAll('*');
        _.each(all_nodes, function(node, index) {
          // 구형 UI 클래스를 대체
          var legacy = _.intersection(node.classList, ['ui', 'segment', 'table', 'celled', 'aligned', 'left', 'center', 'right', 'definition']);
          if (legacy.length > 0) {
            _.each(legacy, function(name) {
              $(node).removeClass(name);
              if (name == 'center') {
                $(node).addClass('text-center');
              } else if (name == 'right') {
                $(node).addClass('text-right');
              } else if (name == 'table') {
                $(node).removeClass('table table-bordered').addClass('table table-bordered');
              } else if (name == 'segment') {
                $(node).replaceWith('<blockquote>' + $(node).html() + '</blockquote>');
              } else if (name == 'definition') {
                _.each($(node).find('tr'), function(tr) {
                  $(_.first($(tr).find('td'))).addClass('table-secondary');
                });
              }
            });
          }
          // end

          // 로컬 이미지를 서버 이미지로 업로드
          if (node.nodeName == 'IMG' && node.src.indexOf('data:image') == 0) {
            if (node.parentNode.nodeName == 'DIV' && node.parentNode.style.length > 0 && node.parentElement.childNodes.length == 1) {
              node.setAttribute('style', node.parentNode.style.cssText);

              if (node.parentNode.style.display == 'inline-block') {
                $(node.parentNode).replaceWith(node);
              } else if (node.parentNode.style.margin == '0px auto' || node.parentNode.style.margin == '0 auto') {
                node.parentNode.removeAttribute('style');
                node.parentNode.style.textAlign = 'center';
              } else {
                node.parentNode.removeAttribute('style');
              }

              node.style.display = node.style.display == 'inline-block' && '';
              node.style.maxWidth = node.style.maxWidth == '100%' && '';
            }

            var dataURI = node.src;
            // convert base64 to raw binary data held in a string
            // doesn't handle URLEncoded DataURIs - see SO answer #6850276 for code that does this
            var byteString = atob(dataURI.split(',')[1]);

            // separate out the mime component
            var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];

            // write the bytes of the string to an ArrayBuffer
            var ab = new ArrayBuffer(byteString.length);
            var ia = new Uint8Array(ab);
            for (var i = 0; i < byteString.length; i++) ia[i] = byteString.charCodeAt(i);

            //write the ArrayBuffer to a blob, and you're done
            var file = new Blob([ab], { type: mimeString });

            this.uploadImage(file, function(data) {
              this.src = data.url;
              this.dataset.id = data.image.id;
            }.bind(node));
            // // FIXME Promise 필요!!!!!!!!!!
          }
          // end

          if (node.style.length == 0) node.removeAttribute('style');
          if (node.classList.length == 0) node.removeAttribute('class');
          if (node.childNodes.length > 1 && node.firstChild.nodeName == 'BR') node.removeChild(node.firstChild);
          if (node.childNodes.length > 1 && node.lastChild.nodeName == 'BR') node.removeChild(node.lastChild);
        }.bind(this));

        content = div.innerHTML;

        var nodes = $.parseHTML(content);
        content = _.compact(_.map(nodes, function(node) {
          if (node.nodeType == 1) {
            node.innerHTML = node.innerHTML.trim();
            if (node.nodeName == 'DIV' && node.innerHTML.length == 0) return '';
            if (node.nodeName == 'BR' || (node.childNodes.length == 1 && node.firstChild.nodeName == 'BR')) return '<br>';
            if (!Number.isNaN(Number(node.innerHTML)) && node.innerHTML.indexOf('$') == -1) node.innerHTML = '$' + node.innerHTML + '$';
            return node.outerHTML;
          } else if (node.nodeType == 3 && (node.nodeValue = node.nodeValue.trim(), node.nodeValue.length > 0)) {
            if (!Number.isNaN(Number(node.nodeValue)) && node.nodeValue.indexOf('$') == -1) node.nodeValue = '$' + node.nodeValue + '$';
            return '<div>' + node.nodeValue + '</div>';
          } else {
            return '';
          }
        }.bind(this))).join('\n');

        var eqs = content ? content.match(/\$[^\$]*\$/g) : [];
        _.each(eqs, function(eq) {
          var nodes = $.parseHTML(eq),
              annotation = _.compact(_.map(nodes, function(node) {
                return node = $(node).text();
              })).join('\n'),
              replace = annotation.replace(/&gt;/g, '{\\gt}').replace(/&lt;/g, '{\\lt}').replace(/&nbsp;/g, ' ')
                                  .replace(/[^\S\r\n](_|-|\+|\^|\=)/g, '$1')
                                  .replace(/(_|-|\+|\^|\=)[^\S\r\n]/g, '$1')
                                  .replace(/\\rightarrow/g, '\\to')
                                  .replace(/</g, '{\\lt}')
                                  .replace(/>/g, '{\\gt}')
                                  .replace(/㉠/g, '\\text{(가)}')
                                  .replace(/㉡/g, '\\text{(나)}')
                                  .replace(/㉢/g, '\\text{(다)}')
                                  .replace(/㉣/g, '\\text{(라)}')
                                  .replace(/㉤/g, '\\text{(마)}');
          // if (annotation != replace) {
          //   console.warn(annotation, '\n→', replace);
          // } else {
          //   console.log('변경사항 없음', annotation);
          // }
          content = content.replace(eq, replace);
        });

        return content;
      },
      saveProblem: function() {
        if (this.problem.content) { this.problem.content = this.problem.content.trim(); } else { return alert('문제를 입력해주세요'); }
        if (this.problem.is_objective) {
          if (this.problem.exm_1) {
            this.problem.exm_1 = this.problem.exm_1.trim();
            if (this.problem.exm_1.indexOf('$') == -1 && !Number.isNaN(Number(this.problem.exm_1))) this.problem.exm_1 = '$' + this.problem.exm_1 + '$';
          } else { return alert('보기 1번을 입력해주세요'); }
          if (this.problem.exm_2) {
            this.problem.exm_2 = this.problem.exm_2.trim();
            if (this.problem.exm_2.indexOf('$') == -1 && !Number.isNaN(Number(this.problem.exm_2))) this.problem.exm_2 = '$' + this.problem.exm_2 + '$';
          } else { return alert('보기 2번을 입력해주세요'); }
          if (this.problem.exm_3) {
            this.problem.exm_3 = this.problem.exm_3.trim();
            if (this.problem.exm_3.indexOf('$') == -1 && !Number.isNaN(Number(this.problem.exm_3))) this.problem.exm_3 = '$' + this.problem.exm_3 + '$';
          } else { return alert('보기 3번을 입력해주세요'); }
          if (this.problem.exm_4) {
            this.problem.exm_4 = this.problem.exm_4.trim();
            if (this.problem.exm_4.indexOf('$') == -1 && !Number.isNaN(Number(this.problem.exm_4))) this.problem.exm_4 = '$' + this.problem.exm_4 + '$';
          } else { return alert('보기 4번을 입력해주세요'); }
          if (this.problem.exm_5) {
            this.problem.exm_5 = this.problem.exm_5.trim();
            if (this.problem.exm_5.indexOf('$') == -1 && !Number.isNaN(Number(this.problem.exm_5))) this.problem.exm_5 = '$' + this.problem.exm_5 + '$';
          } else { return alert('보기 5번을 입력해주세요'); }
          if (!_.contains([1,2,3,4,5], Number(this.problem.answer))) return alert('정답을 선택해주세요');
          this.problem.correct_ratio = this.problem['exm_' + Number(this.problem.answer) + '_ratio'];
        } else {
          this.problem.exm_1 = null;
          this.problem.exm_1_ratio = null;
          this.problem.exm_2 = null;
          this.problem.exm_2_ratio = null;
          this.problem.exm_3 = null;
          this.problem.exm_3_ratio = null;
          this.problem.exm_4 = null;
          this.problem.exm_4_ratio = null;
          this.problem.exm_5 = null;
          this.problem.exm_5_ratio = null;
          if (_.isNull(this.problem.answer) || this.problem.answer === '') return alert('정답을 입력해주세요');
        }
        if (this.problem.explanation) { this.problem.explanation = this.problem.explanation.trim(); } else { return alert('해설을 입력해주세요'); }

        var ids = _.map(this.$refs.problemPreview.querySelectorAll('img[data-id]'), function(img) { return Number(img.dataset.id); });
        this.problem.problem_images = _.compact(_.map(this.problem.problem_images, function(img) {
	        if (_.includes(ids, img.id)) return img;
        }));

        this.$nextTick(function() {
          if (_.every(_.map($('textarea'), function(textarea) {
	          return this.textareaCheck(null, textarea);
          }.bind(this)))) $(this.$refs.problemForm).submit();
        }.bind(this));
      }
    },
    created: function() {
      if (this.problem.id && !this.problem.exm_1) this.problem.is_objective = false;
      if (!_.isNull(this.problem.answer) && !_.isUndefined(this.problem.answer)) this.problem.answer = Number(this.problem.answer);
      this.problem.year = this.problem.problem_source ? this.problem.problem_source.year : new Date().getFullYear();
    },
    beforeMount: function() {
      this.problem.content = this.initHTML(this.problem.content);
      this.problem.exm_1 = this.initHTML(this.problem.exm_1);
      this.problem.exm_2 = this.initHTML(this.problem.exm_2);
      this.problem.exm_3 = this.initHTML(this.problem.exm_3);
      this.problem.exm_4 = this.initHTML(this.problem.exm_4);
      this.problem.exm_5 = this.initHTML(this.problem.exm_5);
      this.problem.explanation = this.initHTML(this.problem.explanation);
    },
    mounted: function() {
      $(window).on('resize', _.debounce(function() {
        _.each($('textarea'), function(textarea) {
          $(textarea)
            .off('input focus blur change')
            .on('input focus blur change', this.textareaCheck)
            .on('input focus blur change', function() {
              $(textarea).height('auto').height(Math.max(20, textarea.scrollHeight - 16));
            }.bind(this)).trigger('change');
        }.bind(this));
      }.bind(this), 50)).trigger('resize');
      this.renderMath();
      this.$validate();
    },
    updated: function() {
      this.renderMath();
      this.$validate();
    },
    validators: {
      'problem.content': function(value) { return Validator.value(value).required(); },
      'problem.exm_1': function(value) { return Validator.value(value).required(); },
      'problem.exm_2': function(value) { return Validator.value(value).required(); },
      'problem.exm_3': function(value) { return Validator.value(value).required(); },
      'problem.exm_4': function(value) { return Validator.value(value).required(); },
      'problem.exm_5': function(value) { return Validator.value(value).required(); },
      'problem.explanation': function(value) { return Validator.value(value).required(); },
      // 'problem.subject_id': function(value) { return Validator.value(value).required(); },
      // 'problem.problem_source_id': function(value) { return Validator.value(value).required(); },
      'problem.score': function(value) { return Validator.value(value).required().integer().greaterThan(0); },
      'problem.answer': function(value) {
        if (this.problem.is_objective) {
          return Validator.value(value).required().integer().in([1,2,3,4,5]);
        } else {
          return Validator.value(value).required().integer();
        }
      },
      'problem.level': function(value) { return Validator.value(value).required().integer().in([1,2,3]); },
      'problem.exm_1_ratio': function(value) { return Validator.value(value).required().integer().between(0, 100).custom(function() { if (!this.exm_ratio_sum) return '합계가 100이 되어야 합니다'; }.bind(this)); },
      'problem.exm_2_ratio': function(value) { return Validator.value(value).required().integer().between(0, 100).custom(function() { if (!this.exm_ratio_sum) return '합계가 100이 되어야 합니다'; }.bind(this)); },
      'problem.exm_3_ratio': function(value) { return Validator.value(value).required().integer().between(0, 100).custom(function() { if (!this.exm_ratio_sum) return '합계가 100이 되어야 합니다'; }.bind(this)); },
      'problem.exm_4_ratio': function(value) { return Validator.value(value).required().integer().between(0, 100).custom(function() { if (!this.exm_ratio_sum) return '합계가 100이 되어야 합니다'; }.bind(this)); },
      'problem.exm_5_ratio': function(value) { return Validator.value(value).required().integer().between(0, 100).custom(function() { if (!this.exm_ratio_sum) return '합계가 100이 되어야 합니다'; }.bind(this)); },
      'problem.correct_ratio': function(value) { return Validator.value(value).required().integer().between(0, 100); },
    }
  });
