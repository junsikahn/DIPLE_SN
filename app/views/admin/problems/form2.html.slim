script type="template/x-template" id="quill_template"
  div
    div.ui.fullscreen.modal
      div.header v-text="editorTitle"
      div.content style="padding: 0;"
        div.problem_container.clearfix
          table.ui.table
            thead
              tr
                th 미리보기
            tbody
              tr
                td style="padding: 0;"
                  div.preview_editor v-html="renderContent"
        div.problem_container.clearfix style="width: calc(100% - 540px); padding-left: 0;"
          quill-editor ref="problemEditor" v-model="editorContent" :options="editorOption"
            div#toolbar slot="toolbar"
              div
                span.ql-formats
                  select.ql-size data-tooltip="글씨 크기" data-inverted=""
                    option value="small"
                    option value="" selected=""
                    option value="large"
                span.ql-formats
                  button.ql-bold data-tooltip="굵게" data-inverted=""
                  button.ql-italic data-tooltip="기울임" data-inverted=""
                  button.ql-underline data-tooltip="밑줄" data-inverted=""
                  button.ql-strike data-tooltip="취소선" data-inverted=""
                  button.ql-script value="super" data-tooltip="위첨자" data-inverted=""
                  button.ql-script value="sub" data-tooltip="아래첨자" data-inverted=""
                span.ql-formats
                  select.ql-align data-tooltip="정렬" data-inverted=""
                  button.ql-indent value="-1" data-tooltip="들여쓰기" data-inverted=""
                  button.ql-indent value="+1" data-tooltip="들여쓰기 취소" data-inverted=""
                span.ql-formats
                  select.ql-color data-tooltip="색상" data-inverted=""
                  select.ql-background data-tooltip="배경색" data-inverted=""
                  button.ql-clean data-tooltip="서식 제거" data-inverted=""
              div.ui.fitted.hidden.divider
              div
                span.ql-formats
                  button.ql-image data-tooltip="이미지 삽입" data-inverted=""
                  button.ql-blockquote data-tooltip="블럭 삽입" data-inverted=""
                  button @click="addGraph" data-tooltip="그래프 삽입" data-inverted=""
                    i.area.graph.icon
                  button @click="addTable" data-tooltip="표 삽입" data-inverted=""
                    i.table.icon
      div.actions
        button.ui.cancel.button @click="cancelEdit" 취소
        button.ui.positive.submit.button @click="saveEdit(type)" 저장

javascript:
  var Block = Quill.import('blots/block');
  Block.tagName = 'DIV';
  Quill.register(Block, true);

  var quillEditor = {
    template: '#quill_template',
    props: ['type'],
    data: function() {
      return {
        editorTitle: (this.type == 'content' ? '문제' : (this.type == 'explanation' ? '해설' : '보기')) + ' 입력하기',
        editorContent: this.$parent.$data['problem'][this.type],
        editorOption: {
          placeholder: '내용을 입력해주세요',
          modules: {
            formula: true,
            toolbar: '#toolbar',
            // keyboard: {
            //   bindings: {
            //     linebreak: {
            //       key: 'enter',
            //       shiftKey: true,
            //       handler: function(range) {
            //         // this.quill.clipboard.dangerouslyPasteHTML(range.index, '\n');
            //         // this.quill.setSelection(range.index + 1, Quill.sources.SILENT);
            //         return false;
            //       }
            //     }
            //   }
            // }
          }
        }
      }
    },
    computed: {
      quill: function() { return this.$refs.problemEditor.quill; },
      renderContent: function() {
        var content = this.editorContent;
        if (content && content.length > 0) {
          content = content.replace(/\&amp;/g, '&');
          var html = document.createElement('div');
          html.innerHTML = content;
          // _.each($(html).find('blockquote'), function(p) {
          //   $(p).replaceWith('<div class="ui segment">' + $(p).html() + '</div>');
          // });
          _.each($(html).find('div.ql-align-right'), function(p) {
            $(p).replaceWith('<div style="text-align: right;">' + $(p).html() + '</div>');
          });
          _.each($(html).find('div.ql-align-center'), function(p) {
            $(p).replaceWith('<div style="text-align: center;">' + $(p).html() + '</div>');
          });
          content = html.innerHTML.replace(/\&amp;/g, '&');
          var eqs = content.match(/\$[^\$]*\$/g);
          _.each(eqs, function(eq) {
            var annotation = eq.replace(/\$/g, '');
            try {
              var result = katex.renderToString(annotation);
              content = content.replace(eq, '<span class="ql-formula" data-value="' + annotation + '">' + result + '</span>');
            } catch(err) {
              content = content.replace(eq, '<mark>' + eq + '</mark>');
            }
          });
          return content.replace(/\<\/div\>\<div/g, '</div>\r<div');
        }
      }
    },
    components: {
      'quill-editor': VueQuillEditor.quillEditor,
    },
    methods: {
      addGraph: function() {
        // this.quill.insertText(0, 'Hello', 'bold', true);
        // this.quill.focus();
        this.quill.focus();
        var current_index = this.quill.getSelection();
        console.log(current_index);
        this.quill.insertText(current_index, 'Hello', 'bold', true);
      },
      addTable: function() {
        this.quill.focus();
        var current_index = this.quill.getSelection();
        this.quill.insertEmbed(current_index, 'table',[
          [{
            content:'Hello',
            style: {
              backgroundColor: 'red',
              borderTop: '1px solid black',
              color: 'white',
              weight: 'bold'
            }
          }, 'World'],
          ['A', 'B']
        ]);
      },
      cancelEdit: function() {
        return this.$parent.currentEditor = null;
      },
      saveEdit: function(type) {
        this.$parent.currentEditor = null;
        var html = document.createElement('div');
        html.innerHTML = this.editorContent;
        _.each($(html).find('.ql-formula'), function(formula) {
          formula.replaceWith('$' + $(formula).data('value') + '$');
        });
        return this.$parent.$data['problem'][type] = html.innerHTML.replace(/\<p\>/g, '<div>').replace(/\<\/p\>/g, '</div>').replace(/\<\/div\>\<div/g, '</div>\r<div').replace(/\sclass=""/g, '').replace(/\&amp;/g, '&');
      }
    },
    mounted: function() {
      if (this.type == null) return false;
      $(this.$el).find('.modal').modal({
        autofocus         : false,
        observeChanges    : true,
        keyboardShortcuts : false,
        closable          : false,
        onHidden: function() { $(this).remove(); }
      }).modal('show');
    }
  };

div#problem_edit
  editor :type="currentEditor" :key="currentEditor"
  div.ui.grid
    div.ui.column.eight.wide
      table.ui.table
        thead
          tr
            th 미리보기
        tbody
          tr
            td
              div.problem_container.clearfix
                div
                  span.ui.horizontal.basic.label
                    span.preview_score v-html="problem.score + '점'" @click="inputScore" style="cursor: pointer;"
                  span.ui.horizontal.label
                    span.preview_subject v-html="subject.path"
                div.ui.top.attached.black.segment.clearfix.problem_seg
                  div.preview_content v-html="problem.content" @click="currentEditor = 'content'" :class="[ currentEditor == 'content' ? 'is-editing' : '' ]"
                div.ui.attached.segment.exm_seg
                  div.ui.very.relaxed.selection.list.exm_list
                    div.item.exm_item v-for="(exm, index) in [problem.exm_1, problem.exm_2, problem.exm_3, problem.exm_4, problem.exm_5]" @click="inputAnswer(index + 1)" :class="[ problem.answer == index + 1 ? 'active' : '' ]"
                      span.ui.circular.mini.horizontal.label v-text="index + 1" :class="[ problem.answer == index + 1 ? 'green' : 'basic' ]"
                      div.preview_exm v-html="exm" @click.stop="currentEditor = 'exm_' + (index + 1)" :class="[ currentEditor == 'exm_' + (index + 1) ? 'is-editing' : '' ]"
                div.ui.attached.secondary.segment.problem_seg
                  div.preview_explanation v-html="problem.explanation" @click="currentEditor = 'explanation'" :class="[ currentEditor == 'explanation' ? 'is-editing' : '' ]"
                div.ui.bottom.attached.right.aligned.secondary.segment.problem_seg
                  | 정답은&nbsp;
                  span.ui.circular.mini.horizontal.label.basic.preview_answer v-html="problem.answer" @click="inputAnswer()" style="cursor: pointer;"
                  | 입니다
    div.ui.column.eight.wide
      div.ui.form
        table.ui.table
          thead
            tr
              th 최종Data
          tbody
            tr
              td
                div.field.search.required
                  label.search.required 단원
                  div.ui.icon.input
                    input.prompt type="text" placeholder="단원 검색" :value="subject.name"
                      i.check.green.icon v-if="subject"
                      i.search.icon v-else=""
                  div.results
            tr
              td
                div.field.text.required
                  label.text.required 문제
                  div.ui.input.field
                    textarea rows="1" placeholder="문제를 입력해주세요" v-model="problem.content" @input="resizeTextarea"
                div.field.text
                  label.text.required 보기1
                  div.ui.input.field
                    textarea rows="1" placeholder="보기1번을 입력하세요" v-model="problem.exm_1" @input="resizeTextarea"
                div.field.text
                  label.text.required 보기3
                  div.ui.input.field
                    textarea rows="1" placeholder="보기3번을 입력하세요" v-model="problem.exm_2" @input="resizeTextarea"
                div.field.text
                  label.text.required 보기3
                  div.ui.input.field
                    textarea rows="1" placeholder="보기3번을 입력하세요" v-model="problem.exm_3" @input="resizeTextarea"
                div.field.text
                  label.text.required 보기4
                  div.ui.input.field
                    textarea rows="1" placeholder="보기4번을 입력하세요" v-model="problem.exm_4" @input="resizeTextarea"
                div.field.text
                  label.text.required 보기5
                  div.ui.input.field
                    textarea rows="1" placeholder="보기5번을 입력하세요" v-model="problem.exm_5" @input="resizeTextarea"
            tr
              td
                div.two.fields
                  div.field.numeric.required
                    label.numeric.required 정답
                    div.ui.input.field
                      input.numeric.required type="number" placeholder="정답을 입력하세요" v-model.number="problem.answer"
                  div.field.numeric.required
                    label.numeric.required 점수
                    div.ui.input.field
                      input.numeric.required type="number" min="0" placeholder="점수를 입력하세요" v-model.number="problem.score"
                div.field.text
                  label.text.required 해설
                  div.ui.input.field
                    textarea rows="1" placeholder="해설을 입력하세요" v-model="problem.explanation" @input="resizeTextarea"
          table.ui.table
            thead
              tr
                th.sixteen.wide 저장하시겠습니까?
                th.collapsing
                  button.ui.positive.fluid.submit.button 저장

javascript:
  var vm = new Vue({
    el: '#problem_edit',
    data: {
      problem: #{{ @admin_problem.to_json.html_safe }},
      subject: #{{ @admin_problem.subject.to_json.html_safe }},
      currentEditor: null
    },
    components: {
      'editor': quillEditor,
    },
    methods: {
      inputScore: function() {
        var score = Number(prompt('점수를 숫자로 입력하세요'));
        if (!score || score < 0) return false;
        return this.problem.score = score;
      },
      inputAnswer: function(answer) {
        answer = answer || Number(prompt('정답을 숫자로 입력하세요'));
        if (!answer || answer < 0) return false;
        return this.problem.answer = answer;
      },
      resizeTextarea: function(e) {
        textarea = e.target;
        var st = $(window).scrollTop();
        $(textarea).css('height', 'auto');
        $(textarea).height(textarea.scrollHeight - 22);
        $(window).scrollTop(st);
      },
      init: function() {
        $.each($('textarea'), function(index, textarea){
          $(textarea).css('height', 'auto');
          $(textarea).height(textarea.scrollHeight - 22);
        });
        renderMathInElement(this.$el, {
          delimiters: [
            { left: "$$", right: "$$", display: true },
            { left: "$",  right: "$",  display: false }
          ]
        });
      }
    },
    mounted: function() { this.init(); },
    updated: function() { this.init(); }
  });

css:
  .preview_content,
  .preview_explanation,
  .preview_exm {
    padding: 3px 0;
    cursor: text;
    border-radius: 5px;
    transition: background .25s, box-shadow .5s;
  }
  .preview_content:hover,
  .preview_explanation:hover,
  .preview_exm:hover {
    background-color: rgba(0, 0, 0, 0.1);
    box-shadow: 0 0 1px grey;
  }

  .preview_exm {
    display: inline-block;
    width: calc(100% - 30px);
    padding: 3px 0;
    float: right;
  }

  .preview_editor {
    word-wrap: break-word;
    max-width: 500px;
    padding: 1rem;
  }

  .preview_editor blockquote {
    border: 1px solid lightgrey;
    margin: 1rem 0;
    padding: 1rem;
    border-radius: 3px;
    box-shadow: 0px 0px 1px lightgrey;
  }
  .preview_editor blockquote:first-child { margin-top: 0; }
  .preview_editor blockquote:last-child { margin-bottom: 0; }

  .preview_editor:empty::before,
  .preview_content:empty::before,
  .preview_exm:empty::before,
  .preview_explanation:empty::before {
    content: '내용을 입력해주세요';
    color: #ccc;
  }

  .preview_editor:empty::after,
  .preview_content:empty::after,
  .preview_exm:empty::after,
  .preview_explanation:empty::after {
    content: '*';
    color: red;
    float: right;
    margin-right: -3px;
    line-height: 1px;
  }

  .is-editing {
    position: relative;
    outline: none;
    background-color: rgba(33, 33, 33, .05);
  }

  .is-editing::before {
    content: '\f27a';
    font-family: 'Icons';
    color: lightgrey;
    position: absolute;
    top: 0;
    right: 0;
    padding: 3px 5px;
    animation: flash 3s infinite;
  }
